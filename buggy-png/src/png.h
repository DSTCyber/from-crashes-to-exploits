/*
 * png.h
 *
 * Header file describing a PNG. Only the elements necessary to trigger the bug
 * are used.
 *
 * libpng version 1.2.5 - October 3, 2002
 * Copyright (c) 1998-2002 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 * 
 * This code is released under the libpng license.
 * For conditions of distribution and use, see the disclaimer and license in
 * the license file.
 *
 * Modifications by DST Group, 2018
 */

#ifndef PNG_H_
#define PNG_H_

#include <stdint.h>

typedef uint8_t png_byte;
typedef uint16_t png_uint_16;
typedef uint32_t png_uint_32;

#define PNG_ZBUF_SIZE   65536

/* Constant strings for known chunk types. */
#define PNG_IHDR const png_byte png_IHDR[5] = {73, 72, 68, 82, '\0'}
#define PNG_IDAT const png_byte png_IDAT[5] = {73, 68, 65, 84, '\0'}
#define PNG_IEND const png_byte png_IEND[5] = {73, 69, 78, 68, '\0'}
#define PNG_PLTE const png_byte png_PLTE[5] = {80, 76, 84, 69, '\0'}
#define PNG_tRNS const png_byte png_tRNS[5] = {116, 82, 78, 83, '\0'}

/* Various modes of operation. */
#define PNG_HAVE_IHDR 0x01
#define PNG_HAVE_PLTE 0x02
#define PNG_HAVE_IDAT 0x04
#define PNG_AFTER_IDAT 0x08
#define PNG_HAVE_IEND 0x10

#define PNG_INFO_tRNS 0x0010

typedef struct {
  png_byte red;
  png_byte green;
  png_byte blue;
} png_color;

typedef struct {
  png_byte index;
  png_uint_16 red;
  png_uint_16 green;
  png_uint_16 blue;
  png_uint_16 gray;
} png_color_16;

typedef struct {
  void *io_ptr; /* Pointer to application struct for I/O functions */

  png_uint_32 mode; /* Tells us where we are in the PNG file */

  png_byte *zbuf;   /* Buffer for zlib */
  size_t zbuf_size; /* Size of zbuf */

  png_uint_32 width;    /* Width of image in pixels */
  png_uint_32 height;   /* Height of image in pixels */
  png_uint_32 rowbytes; /* Size of row in bytes */

  png_uint_32 idat_size;   /* Current IDAT size for read */
  png_uint_32 crc;         /* Current chunk CRC value */
  png_uint_16 num_palette; /* Number of color entries in the palette */
  png_uint_16 num_trans;   /* Number of transparency values */
  png_byte chunk_name[5];  /* Null-terminated name of current chunk */
  png_byte interlaced;     /* PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7 */
  png_byte color_type;     /* Color type of file */
  png_byte bit_depth;      /* Bit depth of file */
  png_byte pixel_depth;    /* Number of bits per pixel */
  png_byte channels;       /* Number of channels in file */
  png_byte sig_bytes;      /* Magic bytes read/written from start of file */

  png_color_16 trans_values;

  // This is normally defined in png_info
  png_uint_32 valid; /* Valid chunk data */
} png_struct_t;

/* Maximum positive integer used in PNG is (2^32)-1 */
#define PNG_MAX_UINT ((png_uint_32)0x7fffffffL)

/* Maximum number of entries in PLTE/sPLT/tRNS arrays */
#define PNG_MAX_PALETTE_LENGTH 256

/* These describe the color_type field in png_info. */
#define PNG_COLOR_MASK_PALETTE 1
#define PNG_COLOR_MASK_COLOR 2
#define PNG_COLOR_MASK_ALPHA 4

/* Color types. Note that not all combinations are legal */
#define PNG_COLOR_TYPE_GRAY 0
#define PNG_COLOR_TYPE_PALETTE (PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_PALETTE)
#define PNG_COLOR_TYPE_RGB PNG_COLOR_MASK_COLOR
#define PNG_COLOR_TYPE_RGB_ALPHA (PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_ALPHA)
#define PNG_COLOR_TYPE_GRAY_ALPHA PNG_COLOR_MASK_ALPHA

/*
 * Read a PNG file and fill in a png_struct_t structure.
 *
 * Returns NULL on failure.
 */
png_struct_t *png_read(FILE *infile);

/* Free allocated memory associated with a png_struct_t structure */
void png_destroy(png_struct_t *png_ptr);

#endif
